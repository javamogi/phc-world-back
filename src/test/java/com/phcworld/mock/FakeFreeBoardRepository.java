package com.phcworld.mock;

import com.phcworld.freeboard.domain.FreeBoard;
import com.phcworld.freeboard.domain.dto.FreeBoardSearch;
import com.phcworld.freeboard.service.port.FreeBoardRepository;
import com.phcworld.user.domain.User;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Stream;

public class FakeFreeBoardRepository implements FreeBoardRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<FreeBoard> data = new ArrayList<>();
    @Override
    public Optional<FreeBoard> findById(Long id) {
        return data.stream().filter(freeBoard -> freeBoard.getId().equals(id)).findAny();
    }

    @Override
    public FreeBoard save(FreeBoard freeBoard) {
        if(freeBoard.getId() == null || freeBoard.getId().equals(0L)){
            FreeBoard newFreeBoard = FreeBoard.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(freeBoard.getTitle())
                    .contents(freeBoard.getContents())
                    .writer(freeBoard.getWriter())
                    .countOfAnswer(freeBoard.getCountOfAnswer())
                    .count(freeBoard.getCount())
                    .createDate(freeBoard.getCreateDate())
                    .updateDate(freeBoard.getUpdateDate())
                    .isModifyAuthority(freeBoard.isModifyAuthority())
                    .isDeleteAuthority(freeBoard.isDeleteAuthority())
                    .isDeleted(freeBoard.isDeleted())
                    .build();
            data.add(newFreeBoard);
            return newFreeBoard;
        } else {
            data.removeIf(f -> Objects.equals(f.getId(), freeBoard.getId()));
            data.add(freeBoard);
            return freeBoard;
        }
    }

    @Override
    public List<FreeBoard> findByWriter(User writer) {
        return data.stream().filter(freeBoard -> freeBoard.getWriter().equals(writer)).toList();
    }

    @Override
    public List<FreeBoard> findAllByFetch() {
        return data;
    }

    @Override
    public List<FreeBoard> findByKeyword(FreeBoardSearch searchDto, Pageable pageable) {
        Stream<FreeBoard> stream = null;
        if(searchDto.searchType().equals(0)) {
            stream = data.stream()
                    .filter(freeBoard -> freeBoard.getTitle().contains(searchDto.keyword()));
        } else if(searchDto.searchType().equals(1)){
            stream = data.stream()
                    .filter(freeBoard -> freeBoard.getContents().contains(searchDto.keyword()));
        } else {
            stream = data.stream()
                    .filter(freeBoard -> freeBoard.getWriter().getName().contains(searchDto.keyword()));
        }
        return stream.skip(pageable.getOffset() * pageable.getPageSize())
                .limit(pageable.getPageSize())
                .toList();
    }
}
